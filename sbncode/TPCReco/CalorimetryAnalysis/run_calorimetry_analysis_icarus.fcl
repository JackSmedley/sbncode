#include "services_common_icarus.fcl"

#include "larproperties.fcl"
#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"
#include "detectorproperties_icarus.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"
#include "simulationservices_icarus.fcl"

#include "mcsproducer.fcl"
#include "rangeproducer.fcl"
#include "calorimetry_icarus.fcl"
#include "particleid.fcl"
#include "trackareahit_producer.fcl"
#include "trackhitfilter_module.fcl"

process_name: CaloAna

services:
{
  # @table::icarus_detsim_services
  RandomNumberGenerator: {} #ART native random number generator
  TFileService: { 
    fileName: "calorimetryout.root"
  }
  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "INFO"} } }
  TimeTracker:  { printSummary: true }
  AuxDetExptGeoHelperInterface: { service_provider: "icaruscode/CRT/CRTGeometryHelper" }
  BackTrackerService:  @local::standard_backtrackerservice
  ParticleInventoryService: @local::standard_particleinventoryservice
  @table::icarus_basic_services
  @table::icarus_backtracking_services
}
services.SpaceChargeService: @local::icarus_spacecharge

# services.IFBeam: {}
# services.BackTracker: @local::standard_backtracker

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

outputs:
{
  outpid:
  {
    module_type: RootOutput
    fileName:    "%ifb_%tc-%p.root"

    fastCloning: false
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  producers:{
    pandoraTrackMCS: @local::mcs_sbn
    pandoraTrackRange: @local::range_sbn
    areahit25: @local::trackareahit_icarus
    filthit: @local::trackhitfilter_icarus
    filtgoodhit: @local::trackhitfilter_icarus
    calorimetry: @local::icarus_gnewcalomc 
  }

  analyzers:
  {
    calorimetryana: {
      module_type: CalorimetryAnalysis
      CALOproducer: "calorimetry"
      PIDproducer:  "particleid"
      TRKproducer:  "pandoraTrackGausCryo0"
      PFPproducer: "pandoraGausCryo0"
      HitProducers: ["cluster3DCryo0"]
      ADCtoE: [] 
    }
  }

#  runprod: [ filtgoodhit, pandoraTrackMCS, pandoraTrackRange, areahit25, calorimetryana]
  runprod: [  calorimetry, filtgoodhit,  pandoraTrackMCS, pandoraTrackRange]
  ana: [calorimetryana]
  trigger_paths: [runprod]
  stream1:       [ ]
  end_paths:     [ana]
}


physics.producers.filthit.PassBadHits: true

physics.producers.pandoraTrackMCS.TrackLabel: pandoraTrackGausCryo0
physics.producers.pandoraTrackRange.TrackLabel: pandoraTrackGausCryo0

physics.producers.calorimetry.TrackModuleLabel: pandoraTrackGausCryo0 
physics.producers.calorimetry.ChargeMethod: 2
physics.producers.calorimetry.FieldDistortion: false
physics.producers.calorimetry.FieldDistortionEfield: false
physics.producers.calorimetry.TrackIsFieldDistortionCorrected: false
physics.producers.calorimetry.CaloAlg.CalAreaConstants: [ 1.56e-2, 1.35e-2, 1.59e-2 ]
